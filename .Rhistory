# Load necessary libraries
# Install the minpack.lm package if it's not already installed
if (!requireNamespace("minpack.lm", quietly = TRUE)) {
install.packages("minpack.lm")  # Install the package
install.packages("tidyverse")
}
install.packages("tidyverse")
# Load necessary libraries
library(nlme)
library(minpack.lm)  # Now this should work without error
library(ggplot2)
library(dplyr)
library(readr)
cattle_growth_data <- read_csv("cattle_growth_data.csv")
View(cattle_growth_data)
library(readr)
# Task 1: Data Preparation
# Load dataset
cattle_data <- read.csv("cattle_growth_data.csv")
# Inspect data structure
str(cattle_data)
cattle_data <- cattle_data %>%
filter(is.finite(Age_Months) & is.finite(Weight_kg) & !is.na(Age_Months) & !is.na(Weight_kg)) %>%
mutate(Group = factor(breed_group))
# Display any rows with non-finite values for diagnostic purposes
non_finite_rows <- cattle_data %>%
filter(
!is.finite(Age_Months) |  # Check for non-finite Age
!is.finite(Weight_kg) # Check for non-finite Weight
)
if (nrow(non_finite_rows) > 0) {
message("Non-finite values detected. Below are the rows with issues:")
print(non_finite_rows)
} else {
message("No non-finite values detected.")
}
# Task 2: Model Fitting
# Define growth model equations
brody_model <- function(Age_Months, A, B, k) A * (1 - B * exp(-k * Age_Months))
vonB_model <- function(Age_Months, A, B, k) A * (1 - exp(-k * Age_Months))^B
log_model <- function(Age_Months, A, B, k) A / (1 + B * exp(-k * Age_Months))
# Fit models for each group
fit_model <- function(model_func, data) {
nlsLM(Weight_kg ~ model_func(Age_Months, A, B, k),
data = cattle_data,
start = list(A = max(data$Weight_kg), B = 0.5, k = 0.01),
control = nls.lm.control(maxiter = 500))
}
fits <- cattle_data %>%
group_by(Group) %>%
summarise(
brody = list(fit_model(brody_model, pick(everything()))),
vonB = list(fit_model(vonB_model, pick(everything()))),
log = list(fit_model(log_model, pick(everything())))
)
# Task 3: Parameter Estimation
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
# Task 4: Model Comparison
#Modify the compare_models() function to correctly retrieve residuals and fitted values:
compare_models <- function(model) {
# Handle non-converged models
if (!model$convInfo$isConv) {
return(c(AIC = NA, BIC = NA, R2 = NA))
}
# Extract residuals and fitted values using functions
residuals <- model$m$resid()  # Residuals
fitted <- model$m$fitted()   # Fitted values
# Calculate actual values as fitted + residuals
actuals <- fitted + residuals
# Compute metrics
AIC_val <- AIC(model)
BIC_val <- BIC(model)
R2_val <- 1 - sum(residuals^2) / sum((actuals - mean(actuals))^2)
return(c(AIC = AIC_val, BIC = BIC_val, R2 = R2_val))
}
model_metrics <- fits %>%
rowwise() %>%
mutate(
brody_metrics = list(compare_models(brody)),
vonB_metrics = list(compare_models(vonB)),
log_metrics = list(compare_models(log))
)
# Task 5: Visualization
plot_growth <- function(model_func, model, data, title) {
pred_data <- data.frame(Age_Months = seq(min(data$Age_Months), max(data$Age_Months), length.out = 100))
pred_data$Weight_kg <- predict(model, newdata = pred_data)
ggplot(data, aes(x = Age_Months, y = Weight_kg)) +
geom_point() +
geom_line(data = pred_data, aes(x = Age_Months, y = Weight_kg), color = "blue") +
labs(title = title, x = "Age (months)", y = "Weight (kg)") +
theme_minimal()
}
plots <- fits %>%
rowwise() %>%
mutate(
brody_plot = list(plot_growth(brody_model, brody, cattle_data, paste(Group, "- Brody Model"))),
vonB_plot = list(plot_growth(vonB_model, vonB, cattle_data, paste(Group, "- Von Bertalanffy Model"))),
log_plot = list(plot_growth(log_model, log, cattle_data, paste(Group, "- Logistic Model")))
)
# Task 6: Interpretation
# Compare parameters and visualize outputs
print(params)
print(fits)
print(plots)
# Return the ggplot object
return(plot)
# Load necessary libraries
# Install the minpack.lm package if it's not already installed
if (!requireNamespace("minpack.lm", quietly = TRUE)) {
install.packages("minpack.lm")  # Install the package
install.packages("tidyverse")
}
install.packages("tidyverse")
# Load necessary libraries
library(nlme)
library(minpack.lm)  # Now this should work without error
library(ggplot2)
library(dplyr)
library(readr)
# Task 1: Data Preparation
# Load dataset
cattle_data <- read.csv("cattle_growth_data.csv")
# Inspect data structure
str(cattle_data)
cattle_data <- cattle_data %>%
filter(is.finite(Age_Months) & is.finite(Weight_kg) & !is.na(Age_Months) & !is.na(Weight_kg)) %>%
mutate(Group = factor(breed_group))
# Display any rows with non-finite values for diagnostic purposes
non_finite_rows <- cattle_data %>%
filter(
!is.finite(Age_Months) |  # Check for non-finite Age
!is.finite(Weight_kg) # Check for non-finite Weight
)
if (nrow(non_finite_rows) > 0) {
message("Non-finite values detected. Below are the rows with issues:")
print(non_finite_rows)
} else {
message("No non-finite values detected.")
}
# Task 2: Model Fitting
# Define growth model equations
brody_model <- function(Age_Months, A, B, k) A * (1 - B * exp(-k * Age_Months))
vonB_model <- function(Age_Months, A, B, k) A * (1 - exp(-k * Age_Months))^B
log_model <- function(Age_Months, A, B, k) A / (1 + B * exp(-k * Age_Months))
# Fit models for each group
fit_model <- function(model_func, data) {
nlsLM(Weight_kg ~ model_func(Age_Months, A, B, k),
data = cattle_data,
start = list(A = max(data$Weight_kg), B = 0.5, k = 0.01),
control = nls.lm.control(maxiter = 500))
}
fits <- cattle_data %>%
group_by(Group) %>%
summarise(
brody = list(fit_model(brody_model, pick(everything()))),
vonB = list(fit_model(vonB_model, pick(everything()))),
log = list(fit_model(log_model, pick(everything())))
)
# Task 3: Parameter Estimation
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
# Task 4: Model Comparison
#Modify the compare_models() function to correctly retrieve residuals and fitted values:
compare_models <- function(model) {
# Handle non-converged models
if (!model$convInfo$isConv) {
return(c(AIC = NA, BIC = NA, R2 = NA))
}
# Extract residuals and fitted values using functions
residuals <- model$m$resid()  # Residuals
fitted <- model$m$fitted()   # Fitted values
# Calculate actual values as fitted + residuals
actuals <- fitted + residuals
# Compute metrics
AIC_val <- AIC(model)
BIC_val <- BIC(model)
R2_val <- 1 - sum(residuals^2) / sum((actuals - mean(actuals))^2)
return(c(AIC = AIC_val, BIC = BIC_val, R2 = R2_val))
}
model_metrics <- fits %>%
rowwise() %>%
mutate(
brody_metrics = list(compare_models(brody)),
vonB_metrics = list(compare_models(vonB)),
log_metrics = list(compare_models(log))
)
# Task 5: Visualization
plot_growth <- function(model_func, model, data, title) {
pred_data <- data.frame(Age_Months = seq(min(data$Age_Months), max(data$Age_Months), length.out = 100))
pred_data$Weight_kg <- predict(model, newdata = pred_data)
ggplot(data, aes(x = Age_Months, y = Weight_kg)) +
geom_point() +
geom_line(data = pred_data, aes(x = Age_Months, y = Weight_kg), color = "blue") +
labs(title = title, x = "Age (months)", y = "Weight (kg)") +
theme_minimal()
}
plots <- fits %>%
rowwise() %>%
mutate(
brody_plot = list(plot_growth(brody_model, brody, cattle_data, paste(Group, "- Brody Model"))),
vonB_plot = list(plot_growth(vonB_model, vonB, cattle_data, paste(Group, "- Von Bertalanffy Model"))),
log_plot = list(plot_growth(log_model, log, cattle_data, paste(Group, "- Logistic Model")))
)
# Return the ggplot object
return(plot)
# Return the ggplot object
return(plot)
knitr::opts_chunk$set(echo = TRUE)
# Step 1 : Install necessary packages
# Install the minpack.lm package if it's not already installed
if (!requireNamespace("minpack.lm", quietly = TRUE)) {
install.packages("minpack.lm")  # Install the package
install.packages("tidyverse")
}
install.packages("tidyverse")
install.packages("readxl")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
# STEP 2 : Load necessary libraries
library(nlme)
library(minpack.lm)  # Now this should work without error
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
# Step 1 : Install necessary packages
# Install the minpack.lm package if it's not already installed
if (!requireNamespace("minpack.lm", quietly = TRUE)) {
install.packages("minpack.lm")  # Install the package
install.packages("tidyverse")
}
install.packages("tidyverse")
install.packages("readxl")
install.packages("readxl")
install.packages("tidyverse")
# STEP 2 : Load necessary libraries
library(nlme)
library(minpack.lm)  # Now this should work without error
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
# Load dataset
cattle_data <- read_excel("cattle_dataset.xlsx")
# View the imported data
head(cattle_data)
# Inspect data structure
str(cattle_data)
# Check for non-finite values
cattle_data <- cattle_data %>%
filter(is.finite(Age_Months) & is.finite(Weight_Kg) & !is.na(Age_Months) & !is.na(Weight_Kg))
# Display any rows with non-finite values for diagnostic purposes
non_finite_rows <- cattle_data %>%
filter(
!is.finite(Age_Months) |  # Check for non-finite Age
!is.finite(Weight_Kg) # Check for non-finite Weight
)
if (nrow(non_finite_rows) > 0) {
message("Non-finite values detected. Below are the rows with issues:")
print(non_finite_rows)
} else {
message("No non-finite values detected.")
}
# Check for missing values
cat("Missing Values:\n")
print(colSums(is.na(cattle_data)))
# Check for duplicate rows
cat("Duplicate Rows:\n")
print(nrow(cattle_data) - nrow(distinct(cattle_data)))
# Summary statistics for each variable
cat("Summary Statistics:\n")
print(summary(cattle_data))
# Check for outliers using Z-score method
z_scores <- scale(cattle_data$Weight_Kg)
outliers <- which(abs(z_scores) > 3)
cat("Outliers Detected (Weight):\n")
print(outliers)
z_scores_age <- scale(cattle_data$Age_Months)
outliers_age <- which(abs(z_scores_age) > 3)
cat("Outliers Detected (Age):\n")
print(outliers_age)
# Define growth model equations
brody_model <- function(Age_Months, A, B, k) A * (1 - B * exp(-k * Age_Months))
vonB_model <- function(Age_Months, A, B, k) A * (1 - exp(-k * Age_Months))^B
log_model <- function(Age_Months, A, B, k) A / (1 + B * exp(-k * Age_Months))
# Set CRAN mirror
options(repos = getOption("repos",
["CRAN" = "[https://cloud.r-project.org/](https://cloud.r-project.org/)"]))
# Set CRAN mirror
options(repos = getOption("repos",
["CRAN"="[https://cloud.r-project.org/](https://cloud.r-project.org/)"]))
# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org/"))
# Step 1 : Install necessary packages
# Install the minpack.lm package if it's not already installed
if (!requireNamespace("minpack.lm", quietly = TRUE)) {
install.packages("minpack.lm")  # Install the package
install.packages("tidyverse")
}
install.packages("tidyverse")
install.packages("readxl")
install.packages("readxl")
install.packages("tidyverse")
rmarkdown::render("nls_cattle_growth_model.Rmd")
install.packages("readxl")
install.packages("tidyverse")
