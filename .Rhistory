}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
# Expand numeric vectors into individual columns
params_flat <- params %>%
unnest_wider(brody_params, names_sep = "_") %>%
unnest_wider(vonB_params, names_sep = "_") %>%
unnest_wider(log_params, names_sep = "_")
params_compact <- params_flat %>%
select(contains("brody_params"), contains("vonB_params"), contains("log_params"))
print(params_compact)
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
params_upd <- as.data.frame(lapply(params, function(x) {
gsub("[^[:print:]]", "", x)
}))
print(params_upd)
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
params_upd <- as.data.frame(lapply(params, function(x) {
gsub("[^[:print:]]", "", x)
}))
# Extract only the required parameter columns
params_selected <- params_upd %>%
select(brody_params, vonB_params, log_params) %>%     # Keep only parameter columns
mutate(
brody_params = sapply(brody_params, paste, collapse = ", "),  # Convert lists to strings
vonB_params  = sapply(vonB_params, paste, collapse = ", "),
log_params   = sapply(log_params, paste, collapse = ", ")
)
# Print the filtered and formatted results
print(params_selected)
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
params_upd <- as.data.frame(lapply(params, function(x) {
gsub("[^[:print:]]", "", x)
}))
# Extract only the required parameter columns
params_selected <- params_upd %>%
select(brody_params, vonB_params, log_params)
# Convert lists to data frames for each parameter set
params_expanded <- data.frame(
brody_params = unlist(params_selected$brody_params),
vonB_params  = unlist(params_selected$vonB_params),
log_params   = unlist(params_selected$log_params)
)
# Print the final output
print(params_expanded)
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
params_upd <- as.data.frame(lapply(params, function(x) {
gsub("[^[:print:]]", "", x)
}))
# Extract only the required parameter columns
params_selected <- params_upd %>%
select(brody_params, vonB_params, log_params) %>%
mutate(
brody_params = lapply(brody_params, unlist),  # Flatten each list into a vector
vonB_params  = lapply(vonB_params, unlist),
log_params   = lapply(log_params, unlist)
) %>%
unnest_longer(brody_params) %>%                 # Expand values as rows
unnest_longer(vonB_params) %>%
unnest_longer(log_params)
# Print the output
print(params_selected)
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
params_upd <- as.data.frame(lapply(params, function(x) {
gsub("[^[:print:]]", "", x)
}))
# Extract only the required parameter columns
params_selected <- params_upd %>%
select(brody_params, vonB_params, log_params) %>%     # Keep only parameter columns
mutate(
brody_params = sapply(brody_params, paste, collapse = ", "),  # Convert lists to strings
vonB_params  = sapply(vonB_params, paste, collapse = ", "),
log_params   = sapply(log_params, paste, collapse = ", ")
)
# Print the filtered and formatted results
print(params_selected)
compare_models <- function(model) {
# Handle non-converged models
if (!model$convInfo$isConv) {
return(c(AIC = NA, BIC = NA, R2 = NA))
}
# Extract residuals and fitted values using functions
residuals <- model$m$resid()  # Residuals
fitted <- model$m$fitted()   # Fitted values
# Calculate actual values as fitted + residuals
actuals <- fitted + residuals
# Compute metrics
AIC_val <- AIC(model)
BIC_val <- BIC(model)
R2_val <- 1 - sum(residuals^2) / sum((actuals - mean(actuals))^2)
return(c(AIC = AIC_val, BIC = BIC_val, R2 = R2_val))
}
model_metrics <- fits %>%
rowwise() %>%
mutate(
brody_metrics = list(compare_models(brody)),
vonB_metrics = list(compare_models(vonB)),
log_metrics = list(compare_models(log))
)
print(model_metrics)
compare_models <- function(model) {
# Handle non-converged models
if (!model$convInfo$isConv) {
return(c(AIC = NA, BIC = NA, R2 = NA))
}
# Extract residuals and fitted values using functions
residuals <- model$m$resid()  # Residuals
fitted <- model$m$fitted()   # Fitted values
# Calculate actual values as fitted + residuals
actuals <- fitted + residuals
# Compute metrics
AIC_val <- AIC(model)
BIC_val <- BIC(model)
R2_val <- 1 - sum(residuals^2) / sum((actuals - mean(actuals))^2)
return(c(AIC = AIC_val, BIC = BIC_val, R2 = R2_val))
}
# Extract metrics for each model and ensure numeric values are displayed
model_metrics <- fits %>%
rowwise() %>%
mutate(
brody_metrics = list(as.numeric(compare_models(brody))),  # Convert to numeric vector
vonB_metrics  = list(as.numeric(compare_models(vonB))),
log_metrics   = list(as.numeric(compare_models(log)))
) %>%
unnest_wider(brody_metrics, names_sep = "_") %>%  # Flatten metrics into separate columns
unnest_wider(vonB_metrics, names_sep = "_") %>%
unnest_wider(log_metrics, names_sep = "_") %>%
ungroup()
# Print the cleaned-up metrics
print(model_metrics)
# Function to check convergence
check_convergence <- function(model) {
if (is.null(model)) return(data.frame(Status = "Error: Model is NULL"))
conv_info <- tryCatch(model$convInfo, error = function(e) NULL)
if (is.null(conv_info)) return(data.frame(Status = "Error: No convergence info"))
residuals <- tryCatch(residuals(model), error = function(e) NA)
fitted <- tryCatch(fitted(model), error = function(e) NA)
actuals <- fitted + residuals
# Calculate R2 if residuals and fitted values are valid
R2 <- if (!anyNA(residuals) && !anyNA(fitted)) {
1 - sum(residuals^2) / sum((actuals - mean(actuals))^2)
} else {
NA
}
# Return details as a data frame
data.frame(
Status = if (conv_info$isConv) "Converged" else "Not Converged",
Iterations = conv_info$finIter,
Tolerance = conv_info$finTol,
StopCode = conv_info$stopCode,
StopMessage = conv_info$stopMessage,
R2 = R2
)
}
# Extract coefficients
extract_coefficients <- function(model) {
tryCatch(as.numeric(coef(model)), error = function(e) NA)
}
# Apply convergence checks and extract details
convergence_results <- fits %>%
rowwise() %>%
mutate(
brody_check = list(check_convergence(brody)),
vonB_check = list(check_convergence(vonB)),
log_check = list(check_convergence(log)),
brody_coeff = list(extract_coefficients(brody)),
vonB_coeff = list(extract_coefficients(vonB)),
log_coeff = list(extract_coefficients(log))
) %>%
unnest_wider(brody_check, names_sep = "_") %>%  # Flatten convergence details
unnest_wider(vonB_check, names_sep = "_") %>%
unnest_wider(log_check, names_sep = "_") %>%
unnest_longer(brody_coeff, values_to = "Brody_Param") %>% # Convert coefficients to rows
unnest_longer(vonB_coeff, values_to = "vonB_Param") %>%
unnest_longer(log_coeff, values_to = "Log_Param") %>%
ungroup()
# Print results
print(convergence_results)
plot_growth <- function(model_func, model, data, title) {
# Prepare prediction data
pred_data <- data.frame(Age_Months = seq(min(data$Age_Months), max(data$Age_Months), length.out = 100))
pred_data$Weight_Kg <- predict(model, newdata = pred_data)
# Create plot
ggplot(data, aes(x = Age_Months, y = Weight_Kg, color = Breed_Group)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "loess", se = FALSE, color = "grey", linetype = "dashed") +
geom_line(data = pred_data, aes(x = Age_Months, y = Weight_Kg), linewidth = 1.2, color = "blue") +
labs(
title = title,
subtitle = "Fitted Growth Model with Observed Data",
x = "Age (months)",
y = "Weight (kg)"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "bottom"
)
}
plots <- fits %>%
rowwise() %>%
mutate(
brody_plot = list(plot_growth(brody_model, brody, cattle_data, paste((Group = factor(Breed_Group)), "- Brody Model"))),
vonB_plot = list(plot_growth(vonB_model, vonB, cattle_data, paste((Group = factor(Breed_Group)), "- Von Bertalanffy Model"))),
log_plot = list(plot_growth(log_model, log, cattle_data, paste((Group = factor(Breed_Group)), "- Logistic Model")))
)
# Display any rows with non-finite values for diagnostic purposes
non_finite_rows <- cattle_data %>%
filter(
!is.finite(Age_Months) |  # Check for non-finite Age
!is.finite(Weight_Kg) # Check for non-finite Weight
)
if (nrow(non_finite_rows) > 0) {
message("Non-finite values detected. Below are the rows with issues:")
print(non_finite_rows)
} else {
message("No non-finite values detected.")
}
# Check for missing values
cat("Missing Values:\n")
print(colSums(is.na(cattle_data)))
# Check for duplicate rows
cat("Duplicate Rows:\n")
print(nrow(cattle_data) - nrow(distinct(cattle_data)))
# Check for outliers using Z-score method
z_scores_Weight <- scale(cattle_data$Weight_Kg)
outliers_Weight <- which(abs(z_scores_Weight) > 3)
cat("Outliers Detected (Weight):\n")
print(outliers_Weight)
z_scores_age <- scale(cattle_data$Age_Months)
outliers_age <- which(abs(z_scores_age) > 3)
cat("Outliers Detected (Age):\n")
print(outliers_age)
for (plot_data in plots$brody_plot) print(plot_data)
for (plot_data in plots$vonB_plot) print(plot_data)
for (plot_data in plots$log_plot) print(plot_data)
# Compare parameters and visualize outputs
print("Parameter Estimates:")
params %>% select(Breed_Group, brody_params, vonB_params, log_params) %>% print()
print("Model Metrics:")
model_metrics %>% select(Breed_Group, brody_metrics, vonB_metrics, log_metrics) %>% print()
knitr::opts_chunk$set(echo = TRUE)
# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org/"))
# Step 1 : Install necessary packages
install.packages(c("minpack.lm", "tidyverse", "readxl"))
# STEP 2 : Load necessary libraries
library(nlme)
library(minpack.lm)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
# Load dataset
cattle_data <- read_excel("cattle_dataset.xlsx")
# View the imported data
head(cattle_data)
# Inspect data structure
str(cattle_data)
# Display any rows with non-finite values for diagnostic purposes
non_finite_rows <- cattle_data %>%
filter(
!is.finite(Age_Months) |  # Check for non-finite Age
!is.finite(Weight_Kg) # Check for non-finite Weight
)
if (nrow(non_finite_rows) > 0) {
message("Non-finite values detected. Below are the rows with issues:")
print(non_finite_rows)
} else {
message("No non-finite values detected.")
}
# Check for missing values
cat("Missing Values:\n")
print(colSums(is.na(cattle_data)))
# Check for duplicate rows
cat("Duplicate Rows:\n")
print(nrow(cattle_data) - nrow(distinct(cattle_data)))
# Check for outliers using Z-score method
z_scores_Weight <- scale(cattle_data$Weight_Kg)
outliers_Weight <- which(abs(z_scores_Weight) > 3)
cat("Outliers Detected (Weight):\n")
print(outliers_Weight)
z_scores_age <- scale(cattle_data$Age_Months)
outliers_age <- which(abs(z_scores_age) > 3)
cat("Outliers Detected (Age):\n")
print(outliers_age)
# Summary statistics for each variable
cat("Summary Statistics:\n")
print(summary(cattle_data))
# Define growth model equations
brody_model <- function(Age_Months, A, B, k) A * (1 - B * exp(-k * Age_Months))
vonB_model <- function(Age_Months, A, B, k) A * (1 - exp(-k * Age_Months))^B
log_model <- function(Age_Months, A, B, k) A / (1 + B * exp(-k * Age_Months))
# Fit models for each group
fit_model <- function(model_func, data) {
nlsLM(Weight_Kg ~ model_func(Age_Months, A, B, k),
data = cattle_data,
start = list(A = 730, B = 0.5, k = 0.01),
control = nls.lm.control(maxiter = 1000))
}
fits <- cattle_data %>%
group_by(Breed_Group) %>%
summarise(
brody = list(fit_model(brody_model, pick(everything()))),
vonB = list(fit_model(vonB_model, pick(everything()))),
log = list(fit_model(log_model, pick(everything())))
)
print(fits)
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
params_upd <- as.data.frame(lapply(params, function(x) {
gsub("[^[:print:]]", "", x)
}))
# Extract only the required parameter columns
params_selected <- params_upd %>%
select(brody_params, vonB_params, log_params) %>%     # Keep only parameter columns
mutate(
brody_params = sapply(brody_params, paste, collapse = ", "),  # Convert lists to strings
vonB_params  = sapply(vonB_params, paste, collapse = ", "),
log_params   = sapply(log_params, paste, collapse = ", ")
)
# Print the filtered and formatted results
print(params_selected)
extract_params <- function(model) {
summary(model)$coefficients
}
params <- fits %>%
mutate(
brody_params = lapply(brody, extract_params),
vonB_params = lapply(vonB, extract_params),
log_params = lapply(log, extract_params)
)
params_upd <- as.data.frame(lapply(params, function(x) {
gsub("[^[:print:]]", "", x)
}))
# Extract only the required parameter columns
params_selected <- params_upd %>%
select(brody_params, vonB_params, log_params) %>%     # Keep only parameter columns
mutate(
brody_params = sapply(brody_params, paste, collapse = ", "),  # Convert lists to strings
vonB_params  = sapply(vonB_params, paste, collapse = ", "),
log_params   = sapply(log_params, paste, collapse = ", ")
)
# Print the filtered and formatted results
print(params_selected)
compare_models <- function(model) {
# Handle non-converged models
if (!model$convInfo$isConv) {
return(c(AIC = NA, BIC = NA, R2 = NA))
}
# Extract residuals and fitted values using functions
residuals <- model$m$resid()  # Residuals
fitted <- model$m$fitted()   # Fitted values
# Calculate actual values as fitted + residuals
actuals <- fitted + residuals
# Compute metrics
AIC_val <- AIC(model)
BIC_val <- BIC(model)
R2_val <- 1 - sum(residuals^2) / sum((actuals - mean(actuals))^2)
return(c(AIC = AIC_val, BIC = BIC_val, R2 = R2_val))
}
# Extract metrics for each model and ensure numeric values are displayed
model_metrics <- fits %>%
rowwise() %>%
mutate(
brody_metrics = list(as.numeric(compare_models(brody))),  # Convert to numeric vector
vonB_metrics  = list(as.numeric(compare_models(vonB))),
log_metrics   = list(as.numeric(compare_models(log)))
) %>%
unnest_wider(brody_metrics, names_sep = "_") %>%  # Flatten metrics into separate columns
unnest_wider(vonB_metrics, names_sep = "_") %>%
unnest_wider(log_metrics, names_sep = "_") %>%
ungroup()
# Print the cleaned-up metrics
print(model_metrics)
# Function to check convergence
check_convergence <- function(model) {
if (is.null(model)) return(data.frame(Status = "Error: Model is NULL"))
conv_info <- tryCatch(model$convInfo, error = function(e) NULL)
if (is.null(conv_info)) return(data.frame(Status = "Error: No convergence info"))
residuals <- tryCatch(residuals(model), error = function(e) NA)
fitted <- tryCatch(fitted(model), error = function(e) NA)
actuals <- fitted + residuals
# Calculate R2 if residuals and fitted values are valid
R2 <- if (!anyNA(residuals) && !anyNA(fitted)) {
1 - sum(residuals^2) / sum((actuals - mean(actuals))^2)
} else {
NA
}
# Return details as a data frame
data.frame(
Status = if (conv_info$isConv) "Converged" else "Not Converged",
Iterations = conv_info$finIter,
Tolerance = conv_info$finTol,
StopCode = conv_info$stopCode,
StopMessage = conv_info$stopMessage,
R2 = R2
)
}
# Extract coefficients
extract_coefficients <- function(model) {
tryCatch(as.numeric(coef(model)), error = function(e) NA)
}
# Apply convergence checks and extract details
convergence_results <- fits %>%
rowwise() %>%
mutate(
brody_check = list(check_convergence(brody)),
vonB_check = list(check_convergence(vonB)),
log_check = list(check_convergence(log)),
brody_coeff = list(extract_coefficients(brody)),
vonB_coeff = list(extract_coefficients(vonB)),
log_coeff = list(extract_coefficients(log))
) %>%
unnest_wider(brody_check, names_sep = "_") %>%  # Flatten convergence details
unnest_wider(vonB_check, names_sep = "_") %>%
unnest_wider(log_check, names_sep = "_") %>%
unnest_longer(brody_coeff, values_to = "Brody_Param") %>% # Convert coefficients to rows
unnest_longer(vonB_coeff, values_to = "vonB_Param") %>%
unnest_longer(log_coeff, values_to = "Log_Param") %>%
ungroup()
# Print results
print(convergence_results)
plot_growth <- function(model_func, model, data, title) {
# Prepare prediction data
pred_data <- data.frame(Age_Months = seq(min(data$Age_Months), max(data$Age_Months), length.out = 100))
pred_data$Weight_Kg <- predict(model, newdata = pred_data)
# Create plot
ggplot(data, aes(x = Age_Months, y = Weight_Kg, color = Breed_Group)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "loess", se = FALSE, color = "grey", linetype = "dashed") +
geom_line(data = pred_data, aes(x = Age_Months, y = Weight_Kg), linewidth = 1.2, color = "blue") +
labs(
title = title,
subtitle = "Fitted Growth Model with Observed Data",
x = "Age (months)",
y = "Weight (kg)"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "bottom"
)
}
plots <- fits %>%
rowwise() %>%
mutate(
brody_plot = list(plot_growth(brody_model, brody, cattle_data, paste((Group = factor(Breed_Group)), "- Brody Model"))),
vonB_plot = list(plot_growth(vonB_model, vonB, cattle_data, paste((Group = factor(Breed_Group)), "- Von Bertalanffy Model"))),
log_plot = list(plot_growth(log_model, log, cattle_data, paste((Group = factor(Breed_Group)), "- Logistic Model")))
)
for (plot_data in plots$brody_plot) print(plot_data)
for (plot_data in plots$vonB_plot) print(plot_data)
for (plot_data in plots$log_plot) print(plot_data)
# Set CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org/"))
# Step 1 : Install necessary packages
install.packages(c("minpack.lm", "tidyverse", "readxl"))
install.packages(c("minpack.lm", "tidyverse", "readxl"))
